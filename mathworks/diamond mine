 int dp[51][51][51];
    int cherryPickup(vector<vector<int>>& grid) {
        int n=grid.size();
        if(n==0)
            return 0;
        memset(dp,-1,sizeof(dp));
        return max(0,util(0,0,0,n,grid)); 
    }
    int util(int r1,int c1,int c2,int n,vector<vector<int>> &grid)
    {
        int r2=r1+c1-c2;
        if(r1>=n || c1>=n || r2>=n || c2>=n || grid[r1][c1]==-1 || grid[r2][c2]==-1)
            return INT_MIN;
        if(r1==n-1 && c1==n-1)
            return grid[r1][c1];
        if(dp[r1][c1][c2]!=-1)
            return dp[r1][c1][c2];
        int res=0;
        if(grid[r1][c1]==1)
        res+=grid[r1][c1];
        if(r1!=r2 && grid[r2][c2]==1)
            res+=grid[r2][c2];
        res+=max({util(r1,c1+1,c2+1,n,grid),util(r1,c1+1,c2,n,grid),util(r1+1,c1,c2+1,n,grid),util(r1+1,c1,c2,n,grid)});
        return dp[r1][c1][c2]=res;
    }
