// C++ program for the above approach
#include <bits/stdc++.h>
using namespace std;

// Function to return minimum distinct
// character after M removals
int distinctNumbers(int arr[], int m,
					int n)
{
	unordered_map<int, int> count;

	// Count the occurences of number
	// and store in count
	for (int i = 0; i < n; i++)
		count[arr[i]]++;

	// Count the occurences of the
	// frequencies
	vector<int> fre_arr(n + 1, 0);
	for (auto it : count) {
		fre_arr[it.second]++;
	}

	// Take answer as total unique numbers
	// and remove the frequency and
	// subtract the answer
	int ans = count.size();

	for (int i = 1; i <= n; i++) {
		int temp = fre_arr[i];
		if (temp == 0)
			continue;

		// Remove the minimum number
		// of times
		int t = min(temp, m / i);
		ans -= t;
		m -= i * t;
	}

	// Return the answer
	return ans;
}

// Driver Code
int main()
{
	// Initialize array
	int arr[] = { 2, 4, 1, 5, 3, 5, 1, 3 };

	// Size of array
	int n = sizeof(arr) / sizeof(arr[0]);
	int m = 2;

	// Function call
	cout << distinctNumbers(arr, m, n);
	return 0;
}
