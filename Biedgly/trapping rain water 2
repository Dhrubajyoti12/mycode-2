class Solution {
public:
    typedef pair<int,pair<int,int>> p;
    int row[4]={1,0,-1,0};
    int col[4]={0,1,0,-1};
    class cmp{
      public:
        bool operator()(p& a,p& b)
        {
            return a.first>b.first;
        }
    };
    int trapRainWater(vector<vector<int>>& heightMap) {
        priority_queue<p,vector<p>,cmp> pq;
        int m=heightMap.size();
        if(m==0)
            return 0;
        int n=heightMap[0].size();
        if(m==1 && n==1)
            return 0;
        vector<vector<bool>> visited(m,vector<bool>(n,false));
        for(int i=0;i<m;i++)
        {
            pq.push({heightMap[i][0],{i,0}});
            pq.push({heightMap[i][n-1],{i,n-1}});
            visited[i][0]=visited[i][n-1]=true;
        }
        for(int i=1;i<n-1;i++)
        {
            pq.push({heightMap[0][i],{0,i}});
            pq.push({heightMap[m-1][i],{m-1,i}});
            visited[0][i]=visited[m-1][i]=true;
        }
        int res=0,count=1;
        while(!pq.empty())
        {
            p curr=pq.top();
            pq.pop();
            int i=curr.second.first;
            int j=curr.second.second;
            for(int k=0;k<4;k++)
            {
                if(i+row[k]>=0 && i+row[k]<m && j+col[k]>=0 && j+col[k]<n && !visited[i+row[k]][j+col[k]])
                {
                    visited[i+row[k]][j+col[k]]=true;
                    res+=((heightMap[i+row[k]][j+col[k]]>=curr.first)?0:curr.first-heightMap[i+row[k]][j+col[k]]);
                    pq.push({max(heightMap[i+row[k]][j+col[k]],curr.first),{i+row[k],j+col[k]}});
                }
            }
        }
        return res;
    }
};
