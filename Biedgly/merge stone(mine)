class Solution {
public:
    int dp[30][30][31]={};
    int prev[31];
    int mergeStones(vector<int>& stones, int K) {
        int n=stones.size();
        if(((n-1)%(K-1))!=0)
            return -1;
        prev[0]=0;
        for(int i=0;i<n;i++)
        {
            prev[i+1]=prev[i]+stones[i];
        }
        if(K==n)
        {
            return prev[n];
        }
        return util(0,n-1,1,K);
    }
    int util(int i,int j,int piles,int K)
    {
        if(i==j && piles==1)
            return 0;
        if(((j-i+1-piles)%(K-1))!=0)
         return INT_MAX;
        if(dp[i][j][piles]!=0)
            return dp[i][j][piles];
        int cost=INT_MAX;
        if(piles==1)
        {
            cost=util(i,j,K,K);
            if(cost!=INT_MAX)
            cost=cost+prev[j+1]-prev[i];
        }
        else
        {
            for(int m=i;m<j;m++)
            {
                int left=util(i,m,1,K);
                if(left>=cost) continue;
                int right=util(m+1,j,piles-1,K);
                if(right>=cost) continue;
                cost=min(cost,left+right);
            }
        }
        dp[i][j][piles]=cost;
        return dp[i][j][piles];
    }
};
